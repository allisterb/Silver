
using System;
using Stratis.SmartContracts;


public class AddressMapper : SmartContract
{
    public Address GetSecondaryAddress(Address primary)  {return State.GetAddress(string.Format("SecondaryAddress:{0}",primary));}
    private void SetSecondaryAddress(Address primary, Address secondary)  {State.SetAddress(string.Format("SecondaryAddress:{0}",primary), secondary);}

     [Pure]
    public MappingInfo GetMapping(Address secondary)  {return State.GetStruct<MappingInfo>(string.Format("Mapping:{0}",secondary));}
    private void SetMapping(Address secondary, MappingInfo value)  {State.SetStruct(string.Format("Mapping:{0}",secondary), value);}

    private void ClearMappingInfo(Address secondary)  {State.Clear(string.Format("MappingInfo:{0}",secondary));}

    public Address Owner
    {
        
        get {return State.GetAddress("Owner");}
        private set {State.SetAddress("Owner", value);}
    }

    public AddressMapper(ISmartContractState smartContractState, Address owner) : base(smartContractState)
    {
       
        
        this.Owner = owner;
    }

    public void MapAddress(Address secondary)
    {
        assume GetMapping(secondary).Status == (int)Status.NoStatus;

        MappingInfo mi = new MappingInfo();
        mi.Primary = Message.Sender;
        mi.Status = (int)Status.Pending;
        SetMapping(secondary, mi);
    }

    public void Approve(Address secondary)
    {
        EnsureAdminOnly();
        MappingInfo mapping = GetMapping(secondary);
        assume mapping.Status == (int)Status.Pending;

        SetSecondaryAddress(mapping.Primary, secondary);
        MappingInfo mi = new MappingInfo();
        mi.Primary = mapping.Primary;
        mi.Status = (int)Status.Approved;
        SetMapping(secondary, mi/*new MappingInfo { Primary = mapping.Primary, Status = (int)Status.Approved }*/);
        AddressMappedLog alog = new AddressMappedLog();
        alog.Primary = mapping.Primary;
        alog.Secondary = secondary;
        Log(alog);
        if (secondary.ToBytes().Length == 0)
        {
            Log(secondary);
        }
        else
        {
            Log(3);
        }
    }

    public void Reject(Address secondary)
    {
        EnsureAdminOnly();
        MappingInfo mapping = GetMapping(secondary);
        assume mapping.Status == (int)Status.Pending;

        ClearMappingInfo(secondary); // same address can be mapped again. 
    }

    public Address GetPrimaryAddress(Address secondary)
    {
        MappingInfo mapping = GetMapping(secondary);

        assume mapping.Status == (int)Status.Approved;

        return mapping.Primary;
    }

    public void ChangeOwner(Address owner)
    {
        EnsureAdminOnly();

        assume owner != Address.Zero;

        this.Owner = owner;
    }

    public void EnsureAdminOnly()  {assume this.Owner == Message.Sender;}

    public enum Status
    {
        NoStatus,
        Pending,
        Approved,
    }

    public struct MappingInfo
    {
        [Index]
        public Address Primary;
        public int Status;
    }

    public struct AddressMappedLog
    {
        [Index]
        public Address Primary;

        [Index]
        public Address Secondary;
    }
}
